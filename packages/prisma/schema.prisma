generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  BLOCKED
}

model Organization {
  id                   String                 @id @default(cuid())
  name                 String                 @db.VarChar(10)
  avatar               String?
  created_at           DateTime?              @default(now())
  updated_at           DateTime?              @default(now())
  UsersOnOrganizations UsersOnOrganizations[]

  @@map("organizations")
}

model Account {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  type              String
  provider          String
  providerAccountId String    @map("provider_account_id")
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?
  created_at        DateTime? @default(now())
  updated_at        DateTime? @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("sessions")
}

model User {
  id                   String                 @id @default(cuid())
  name                 String
  email                String                 @unique
  emailVerified        DateTime?              @map("email_verified")
  password             String?
  status               UserStatus             @default(PENDING)
  avatar               String?
  accounts             Account[]
  sessions             Session[]
  created_at           DateTime?              @default(now())
  updated_at           DateTime?              @default(now())
  UsersOnOrganizations UsersOnOrganizations[]

  @@map("users")
}

model UsersOnOrganizations {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @map("user_id")
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")
  created_at     DateTime?    @default(now())
  updated_at     DateTime?    @default(now())
  owner          Boolean      @default(false)

  @@map("users_organizations")
}
