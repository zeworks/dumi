generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  BLOCKED
}

enum MemberRole {
  MEMBER
  OWNER
  USER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Organization {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  avatar    String?
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @map("updated_at")

  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId Int  @map("owner_id")

  members     Member[]
  invitations Invitation[]

  @@map("organizations")
}

model User {
  id            Int        @id @default(autoincrement())
  name          String
  email         String     @unique
  emailVerified DateTime?  @map("email_verified")
  password      String?
  status        UserStatus @default(PENDING)
  avatar        String?
  createdAt     DateTime?  @default(now()) @map("created_at")
  updatedAt     DateTime?  @default(now()) @map("updated_at")

  organization Organization[]
  member       Member[]
  invitation   Invitation[]
  account      Account[]
  session      Session[]

  @@map("users")
}

model Member {
  id String @id @default(cuid())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int  @map("user_id")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId Int          @map("organization_id")

  role MemberRole @default(USER)

  @@unique([userId, organizationId]) // Ensures a user can only have one membership per organization
  @@map("members")
}

model Invitation {
  id        String           @id @default(cuid())
  email     String
  status    InvitationStatus @default(PENDING)
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @default(now()) @map("updated_at")
  token     String           @unique @map("token")

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int?  @map("user_id")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId Int          @map("organization_id")

  @@unique([email, organizationId]) // Ensures an email can only be invited once per organization
  @@map("invitations")
}

model Account {
  id                 String    @id @default(cuid())
  provider           String
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  tokenType          String?   @map("token_type")
  scope              String?
  idToken            String?   @map("id_token")
  sessionState       String?   @map("session_state")

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @map("user_id")

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  expires      DateTime

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @map("user_id")

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
